---
import { getId } from '../lib/component';
import { Image } from 'astro:assets';
import type { AstroImageProps, ImageProps } from '../types';

interface Props {
    images?: (ImageProps)[];
    theme?: string;
    contentSide?: 'left' | 'right';
    lazy?: boolean;
    gridStyle?: gridStyles;
}

export type gridStyles = 'top' | 'default' | 'right' | 'bottom';

const { gridStyle = 'default', contentSide, theme = 'dark', lazy = true } = Astro.props;

const id = getId('bento');
let images = Astro.props.images;

if (import.meta.env.DEV && !images) {
    images =  Array.from({ length: 3 }, (_, i) => ({
        alt: '',
        height: 200,
        width: 200,
        src: `https://placehold.co/200/${theme === 'light' ? '222/eee' : 'eee/222'}/?text=${i+1}`
    }))
} else if (import.meta.env.PROD && !images) images = [];
---
<section class="bento" data-theme={theme} id={id}>
    <div class="container py-5">
        <div class="row">
            <div class="bento-row">
                <div class:list={["col-lg col-md-4 vstack row-gap-3 justify-content-center", contentSide === 'right' ? 'order-1' : '']}>
                    <div class="bento-content">
                        <slot name="leftSide">
                            <h2 class="display-4 fw-semibold">Features made for <i>you!</i></h2>
                            <ul role="list">
                                <li class="h2 fw-light">For people with a dream</li>
                                <li class="h2 fw-light">For people who can smell colors</li>
                                <li class="h2 fw-light">For people that are tone deaf</li>
                            </ul>
                        </slot>
                    </div>
                </div>
                <div class="col-lg-5 col-md-7">
                    <div class={"image-grid image-grid-"+ gridStyle}>
                        {images!.map(({ alt = '', width, height, src, link }) => link ? (<div>
                            <a href={link}>
                                <img src={src} alt={alt} width={width} height={height} loading={lazy ? 'lazy' : null}/>
                            </a>
                        </div>) : (<div>
                            <img src={src} alt={alt} width={width} height={height} loading={lazy ? 'lazy' : null} />
                        </div>))}
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<style>
.bento-row {
    --outer: calc(var(--inner) + var(--spacer));
    --spacer: 1.25rem;
    --inner: 1.25rem;
    padding: var(--spacer);
    gap: 2.25rem;
    align-content: center;
    justify-content: space-between;
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    align-items: center;
    align-self: stretch;

    @media (min-width: 576px) {
        border-radius: var(--outer);
    }
}

.bento-content {
    padding-inline: 1.5rem;
}

.image-grid {
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    aspect-ratio: 1;
    width: 100%;
    height: 100%;
    grid-gap: 0.5rem;
    > * {
        grid-column: span 1;
        grid-row: span 1;
        border-radius: var(--inner);
        transition: border-radius 0.25s ease;
        a {
            border-radius: inherit;
            display: block;
            height: 100%;
            width: 100%;
        }
        img {
            border-radius: inherit;
            height: 100%;
            width: 100%;
            object-fit: cover;
        }
    }
}


@media (pointer: coarse) {
    .image-grid a {
        transition: all 0.25s ease;
        transition-property: opacity, transform;
    }
    .image-grid:hover a:not(:hover) {
        opacity: 0.25;
    }
    .image-grid *:has(a:hover) {
        z-index: 100;
        border-radius: var(--inner)
    }
    .image-grid:hover a:hover {
        transform: scale(1.2);
    }
}

.image-grid-default {
    > :not(:last-child) {
        grid-column: 1;
    }
    > :last-child {
        grid-row: 1 / span 2;
        grid-column: 2;

    }
}
.image-grid-top,
.image-grid-bottom {
    grid-template-columns: 1fr 1fr;
    grid-auto-rows: minmax(200px, 1fr);
}

.image-grid-top {
    > :last-child {
        grid-column: 1 / span 2;
        grid-row: 2;
    }
    > :not(:last-child) {
        grid-row: 1;
    }
}
.image-grid-right {
    grid-template-columns: 1.5fr 1fr;
    > :first-child {
        grid-row: 1 / span 2;
        grid-column: 1;
    }
    > :not(:first-child) {
        grid-column: 2;
    }
}
.image-grid-bottom {
    > :first-child {
        grid-row: 1;
        grid-column: 1 / span 2;
    }
    > :not(:first-child) {
        grid-row: 2;
    }
}
</style>